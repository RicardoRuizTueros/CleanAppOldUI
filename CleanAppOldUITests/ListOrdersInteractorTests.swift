//
//  ListOrdersInteractorTests.swift
//  CleanAppOldUI
//
//  Created by Ricardo Ruiz on 12/10/2019.
//  Copyright (c) 2019 Ricardo Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanAppOldUI
import XCTest

class ListOrdersInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListOrdersInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListOrdersInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListOrdersInteractor()
    {
        sut = ListOrdersInteractor()
    }
    
    // MARK: Test doubles
    
    class ListOrdersPresentationLogicSpy: ListOrdersPresentationLogic
    {
        var presentProductsCalled = false
        var presentProductsDeleted = false
        var presentAddedProduct = false
        
        func PresentProducts(response: ListOrders.LoadProducts.Response) {
            presentProductsCalled = true
        }
        
        func PresentDeletedProduct(response: ListOrders.DeleteProduct.Response) {
            presentProductsDeleted = true
        }
        
        func PresentAddedProduct(response: ListOrders.AddProduct.Response) {
            presentAddedProduct = true
        }
    }
    
    class ListOrdersWorkerSpy: ListOrdersWorker
    {
        // MARK: Method call expectations
        var loadProductsCalled = false
        var dummyProducts = [Product(name: "Product1"), Product(name: "Product2")]
        
        // MARK: Spied methods
        override func LoadProducts (completionHandler: @escaping (([Product]) -> Void))
        {
            loadProductsCalled = true
            completionHandler(dummyProducts)
        }
    }
    
    // MARK: Tests
    
    func testListOrders()
    {
        // Given
        let presenterSpy = ListOrdersPresentationLogicSpy()
        let workerSpy = ListOrdersWorkerSpy()
        
        sut.presenter = presenterSpy
        sut.worker = workerSpy
        
        // When
        let request = ListOrders.LoadProducts.Request()
        sut.LoadProducts(request: request)
        
        // Then
        XCTAssertTrue(presenterSpy.presentProductsCalled, "presentProductsCalled(request:) should ask the presenter to format the result")
        XCTAssertTrue(workerSpy.loadProductsCalled, "loadProductsCalled(request:) should ask the worker for the result")
    }
}
